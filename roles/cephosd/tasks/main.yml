---
- name: extract custom resource data
  set_fact:
    ceph_osd_cr_namespace: '{{ ansible_operator_meta.namespace }}'
    ceph_osd_cr_name: '{{ ansible_operator_meta.name }}'
    ceph_osd_cr_api_version: '{{ _ceph_elemental_net_cephosd.apiVersion }}'
    ceph_osd_cr_kind: '{{ _ceph_elemental_net_cephosd.kind }}'
    ceph_osd_cr_api_group: "{{ _ceph_elemental_net_cephosd.apiVersion.split('/')[0] }}"
    ceph_osd_storage: "{{ _ceph_elemental_net_cephosd.spec.storage }}"
    ceph_osd_pod_template: "{{ _ceph_elemental_net_cephosd.spec.podTemplate }}"
    ceph_osd_update_domain: "{{ _ceph_elemental_net_cephosd.spec.updateDomain }}"

- name: calculate template hash
  set_fact:
    ceph_osd_template_hash: "{{ lookup('dicthash', (lookup('template', 'render-replica-set.json.j2') | from_json))[:16] }}"
  vars:
    ceph_osd_name: "~~CEPH_OSD_NAME~~"
    ceph_osd_host: "~~CEPH_OSD_HOST~~"
    ceph_osd_data: "~~CEPH_OSD_DATA~~"
    ceph_osd_db: "~~CEPH_OSD_DB~~"
    ceph_osd_wal: "~~CEPH_OSD_WAL~~"
    ceph_osd_template_hash: "~~CEPH_OSD_TEMPLATE_HASH~~"

- block:
    - name: lookup installed replica sets
      set_fact:
        ceph_osd_installed_replica_sets: "{{ query('k8s', api_version='v1', api_group='apps', kind='ReplicaSet', namespace=ceph_osd_cr_namespace,
                            label_selector=ceph_osd_cr_api_group + '/owner=' + ceph_osd_cr_kind + '-' + ceph_osd_cr_name) }}"
      no_log: yes
  rescue:
    - debug:
        msg: '{{ ansible_failed_result }}'
    - name: no installed replica sets found
      set_fact:
        ceph_osd_installed_replica_sets: []

# This will search for pods that we own but which directly reference the custom resource.
- block:
    - name: lookup pods from previous operator versions
      set_fact:
        ceph_osd_installed_old_pods: "{{ query('k8s', api_version='v1', kind='Pod', namespace=ceph_osd_cr_namespace,
                            label_selector=ceph_osd_cr_api_group + '/owner=' + ceph_osd_cr_kind + '-' + ceph_osd_cr_name)
                              | selectattr('metadata.ownerReferences.0.kind', 'equalto', ceph_osd_cr_kind) | map(attribute='metadata.name') | list }}"
      no_log: yes
  rescue:
    - debug:
        msg: '{{ ansible_failed_result }}'
    - name: no pods from previous operator versions found
      set_fact:
        ceph_osd_installed_old_pods: []

- name: build list of osds from configuration
  set_fact:
    ceph_osd_osds_configured: "{{ lookup('template', 'configured-osds-list.json.j2') | from_json }}"
  no_log: yes

- name: build list of osds from installed replica sets
  set_fact:
    ceph_osd_osds: "{{ lookup('template', 'extract-osds-from-replica-sets.json.j2') | from_json }}"
  no_log: yes

- name: build union of all configured and already existing pods
  set_fact:
    ceph_osd_osds_existing: >
      {{ ceph_osd_osds.uptodate | combine(ceph_osd_osds.outofdate, ceph_osd_osds.ready, ceph_osd_osds.unready) }}
  no_log: yes

- name: calculate missing replica sets
  set_fact:
    ceph_osd_osds_missing: "{{ ceph_osd_osds_configured.keys() | difference(ceph_osd_osds_existing.keys()) | list }}"
  no_log: yes

- name: calculate superfluous replica sets
  set_fact:
    ceph_osd_osds_superfluous: "{{ ceph_osd_osds_existing.keys() | difference(ceph_osd_osds_configured.keys()) | list }}"
  no_log: yes

- debug:
    msg: "Missing: {{ ceph_osd_osds_missing | sort | join(', ') }}"

- debug:
    msg: "Superfluous: {{ ceph_osd_osds_superfluous | sort | join(', ') }}"

- debug:
    msg: "Invalid: {{ ceph_osd_osds.invalid | sort | join(', ') }}"

- debug:
    msg: "Pods from previous versions: {{ ceph_osd_installed_old_pods | sort | join(', ') }}"

- debug:
    msg: "Up-to-date: {{ ceph_osd_osds.uptodate.keys() | sort | join(', ') }}"

- debug:
    msg: "Out-of-date: {{ ceph_osd_osds.outofdate.keys() | sort | join(', ') }}"

- debug:
    msg: "Ready: {{ ceph_osd_osds.ready.keys() | sort | join(', ') }}"

- debug:
    msg: "Unready: {{ ceph_osd_osds.unready.keys() | sort | join(', ') }}"

- name: delete pods from previous operator versions
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: "{{ ceph_osd_cr_namespace }}"
    name: "{{ item }}"
  loop: "{{ ceph_osd_installed_old_pods }}"

- name: delete invalid replica sets
  k8s:
    state: absent
    api_version: v1
    kind: ReplicaSet
    namespace: "{{ ceph_osd_cr_namespace }}"
    name: "{{ item }}"
  loop: "{{ ceph_osd_osds.invalid }}"

- name: delete superfluous replica sets
  k8s:
    state: absent
    kind: ReplicaSet
    namespace: "{{ ceph_osd_cr_namespace }}"
    name: "{{ item.value.manifest.metadata.name }}"
  when: item.key in ceph_osd_osds_superfluous
  loop: "{{ query('dict', ceph_osd_osds_existing) }}"

- name: create missing replica sets
  k8s:
    state: present
    definition: "{{ lookup('template', 'render-replica-set.json.j2') | from_json }}"
    force: true
  vars:
    ceph_osd_name: "{{ item.value.name_prefix + lookup('password', '/dev/null length=5 chars=ascii_lowercase,digits') }}"
    ceph_osd_host: "{{ item.value.host }}"
    ceph_osd_data: "{{ item.value.osd.data }}"
    ceph_osd_db: "{{ item.value.osd.db | default(None) }}"
    ceph_osd_wal: "{{ item.value.osd.wal | default(None) }}"
  when: item.key in ceph_osd_osds_missing
  loop: "{{ query('dict', ceph_osd_osds_configured) }}"

- name: set state of out-of-date replica sets to out-of-date
  k8s:
    state: present
    api_version: v1
    kind: ReplicaSet
    namespace: "{{ ceph_osd_cr_namespace }}"
    name: "{{ item.value.manifest.metadata.name }}"
    definition: "{{ {'metadata': {'annotations': {ceph_osd_cr_api_group + '/state': 'out-of-date'}}} }}"
  when: >
    (ceph_osd_cr_api_group + '/state') not in item.value.manifest.metadata.annotations or
      item.value.manifest.metadata.annotations[ceph_osd_cr_api_group + '/state'] != 'out-of-date'
  loop: "{{ query('dict', ceph_osd_osds.outofdate) }}"

- name: set state of ready replica sets to up-to-date
  k8s:
    state: present
    api_version: v1
    kind: ReplicaSet
    namespace: "{{ ceph_osd_cr_namespace }}"
    name: "{{ item.value.manifest.metadata.name }}"
    definition: "{{ {'metadata': {'annotations': {ceph_osd_cr_api_group + '/state': 'up-to-date'}}} }}"
  when: >
    (ceph_osd_cr_api_group + '/state') not in item.value.manifest.metadata.annotations or
      item.value.manifest.metadata.annotations[ceph_osd_cr_api_group + '/state'] != 'up-to-date'
  loop: "{{ query('dict', ceph_osd_osds.ready) }}"

- name: set state of up-to-date replica sets to up-to-date
  k8s:
    state: present
    api_version: v1
    kind: ReplicaSet
    namespace: "{{ ceph_osd_cr_namespace }}"
    name: "{{ item.value.manifest.metadata.name }}"
    definition: "{{ {'metadata': {'annotations': {ceph_osd_cr_api_group + '/state': 'up-to-date'}}} }}"
  when: >
    (ceph_osd_cr_api_group + '/state') not in item.value.manifest.metadata.annotations or
      item.value.manifest.metadata.annotations[ceph_osd_cr_api_group + '/state'] != 'up-to-date'
  loop: "{{ query('dict', ceph_osd_osds.uptodate) }}"


# Initializing ceph_osd_update_candidates is necessary as "when" is evaluated for each loop item, see below.
- set_fact:
    ceph_osd_update_candidates: "{{ [] }}"

- name: update out-of-date replica sets by recreating them
  block:
    - block:
        - set_fact:
            # Sorting ensures that we'll advance host by host
            ceph_osd_update_osd: "{{ (ceph_osd_osds.outofdate.keys() | sort)[0] }}"
        - set_fact:
            ceph_osd_update_candidates: "{{ [ceph_osd_osds.outofdate[ceph_osd_update_osd]] }}"
      when: ceph_osd_update_domain == "OSD"

    - block:
        - set_fact:
            ceph_osd_update_host: "{{ (ceph_osd_osds.outofdate.values() | map(attribute='host') | unique | sort)[0] }}"
        - set_fact:
            # Requires Jinja2 >= 2.8
            ceph_osd_update_candidates: "{{ ceph_osd_osds.outofdate.values() | selectattr('host', 'equalto', ceph_osd_update_host) | list }}"
      when: ceph_osd_update_domain == "Host"

    - name: delete out-of-date replica sets
      k8s:
        state: absent
        api_version: v1
        kind: ReplicaSet
        namespace: "{{ ceph_osd_cr_namespace }}"
        name: "{{ item.manifest.metadata.name }}"
      loop: "{{ ceph_osd_update_candidates }}"

    - name: create new up-to-date replica sets
      k8s:
        state: present
        definition: "{{ lookup('template', 'render-replica-set.json.j2') | from_json | combine({'metadata': {'annotations': {ceph_osd_cr_api_group + '/state': 'wait-for-ready'}}}, recursive=True) }}"
        force: true
      vars:
        ceph_osd_name: "{{ item.name_prefix + lookup('password', '/dev/null length=5 chars=ascii_lowercase,digits') }}"
        ceph_osd_host: "{{ item.host }}"
        ceph_osd_data: "{{ item.osd.data }}"
        ceph_osd_db: "{{ item.osd.db | default(None) }}"
        ceph_osd_wal: "{{ item.osd.wal | default(None) }}"
      loop: "{{ ceph_osd_update_candidates }}"
  when: ceph_osd_osds.outofdate | length > 0 and ceph_osd_osds.unready | length == 0
